name: Create Module Releases

on:
  push:
    tags:
      - "*-v*" # Match tags that contain a module name followed by "-v"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Allow write access to repository contents (required for creating releases)
      id-token: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up variables
        id: vars
        run: |
          # Extract the module name from the tag (e.g., vpc-v1.0.0 -> vpc)
          TAG_NAME=${GITHUB_REF##*/}
          MODULE_NAME=${TAG_NAME%-*}  # Get everything before the last '-'
          VERSION=${TAG_NAME#*-}       # Get everything after the first '-'
          echo "MODULE_NAME=${MODULE_NAME}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check if module directory exists
        id: check_module
        run: |
          if [ ! -d "${MODULE_NAME}" ]; then
            echo "Module directory ${MODULE_NAME} does not exist."
            exit 1
          fi
          echo "Module directory ${MODULE_NAME} exists."

      # Optional: Clean up unwanted files (e.g., .git or other source code directories)
      - name: Remove unnecessary files (e.g., .git)
        run: |
          rm -rf .git  # This removes the Git history (source code) and any .git-related files

      # Optional: Copy only the necessary files from the module directory to a release directory
      - name: Copy module files to release directory
        run: |
          # Create a release folder and copy only the relevant files (e.g., .tf files)
          mkdir -p release
          cp -r ${{ env.MODULE_NAME }}/* release/  # Copy everything from the module's directory to 'release/'

      - name: List files to be uploaded (for debugging)
        run: |
          echo "Listing files to be uploaded:"
          ls -R release/

      - name: Upload release files
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release/* # Upload only the contents of the 'release' folder
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: List uploaded files (for debugging)
        run: |
          echo "Files uploaded to the release:"
          ls -R release/
